<?phpclass info	{    var $maxlen   = 2048;    var $q_info   = "\xFF\xFF\xFF\xFFTSource Engine Query\x00";    var $q_num    = "\xFF\xFF\xFF\xFF\x57";    var $q_settings  = "\xFF\xFF\xFF\xFF\x56";    var $q_player = "\xFF\xFF\xFF\xFF\x55";    var $s_info   = false;    var $response = false;    function microtime_float()		{        list($usec, $sec) = explode(" ", microtime());        return ((float)$usec + (float)$sec);		}    function get_challenge($socket)		{          socket_set_timeout($socket, 2);        $time_begin = $this->microtime_float();	 			// get challenge number from server        fwrite($socket, $this->q_num);        $challenge = fread($socket, $this->maxlen);		$time_end  = $this->microtime_float();				// response time		$this->response = $time_end - $time_begin;		$this->response = ($this->response * 1000);		$this->response = (int)$this->response;		$challenge = substr($challenge, 5, 4);		return $challenge;		}        function get_info($socket)								// get server info data		{		socket_set_timeout($socket, 3);		fwrite($socket, $this->q_info);		$this->s_info['info'] = fread($socket, $this->maxlen);		}    function get_settings($socket)								// get server rules data		{		$challenge = $this->get_challenge($socket);		$this->q_settings = $this->q_settings.$challenge;		socket_set_timeout($socket, 3);		fwrite($socket, $this->q_settings);		$this->s_info['settings'] = fread($socket, $this->maxlen);		}    function get_players($socket)							// get server player data		{ 		$challenge = $this->get_challenge($socket);		$this->q_player = $this->q_player.$challenge;		socket_set_timeout($socket, 3);		fwrite ($socket, $this->q_player);		$this->s_info['player'] = fread($socket, $this->maxlen);		}    function getstream($host, $port, $queryport)				// get the full info data from server		{            $socket = fsockopen('udp://'. $host, $port, $errno, $errstr, 30);		if ($socket === false)			{			echo "Error: $errno - $errstr<br>\n";			}		else			{			$this->get_info($socket);			// at this time: rules not important			$this->get_players($socket);			//$this->get_settings($socket);			}        fclose($socket);		if ($this->s_info['info'])			{			return true;			}		else			{			return false;			}		}    function getvalue_byte($def)				 // get value (byte) from raw data		{        $tmp = $this->s_info[$def][0];		$this->s_info[$def] = substr($this->s_info[$def], 1);		return ord($tmp);		}        function getvalue_string($def)				 // get value (string) from raw data		{        $tmp = '';		$index = 0;		while (ord($this->s_info[$def][$index]) != 0)			{			$tmp .= $this->s_info[$def][$index];			$index++;			}		$this->s_info[$def] = substr($this->s_info[$def], $index+1);		return $tmp;		}        function getvalue_sint($def)					// get value (int16) from raw data		{		$tmp = substr($this->s_info[$def], 0, 2);		$this->s_info[$def] = substr($this->s_info[$def], 2);		$array = @unpack('Sshort', $tmp);		return $array['short'];						}    function getvalue_lint($def)					// get value (int32) from raw data		{        $tmp = substr($this->s_info[$def], 0, 4);		$this->s_info[$def] = substr($this->s_info[$def], 4);		$array = @unpack('Lint', $tmp);		return $array['int'];		}    function getvalue_float($def)					// get value (float) from raw data		{ 		$tmp = substr($this->s_info[$def], 0, 4);		$this->s_info[$def] = substr($this->s_info[$def], 4);		$array = @unpack('ffloat', $tmp);		return $array['float'];		}            function getrules($csdir)		{		$srv_rules['sets'] = false;		$srv_rules['response'] = $this->response . ' ms';						// response time		$sets['pass'] = '<img src="' . $csdir . 'images/pass.gif" alt="Yes">';	// game setting pics		$def = 'info';															// set array key to info		$servertype = $this->s_info['info'][4];									// get the servertype (hl1 or source)		$this->s_info['info'] = substr($this->s_info['info'], 5);				// filter the not needed code				if ($servertype == 'm')													// if server running hl1 game get the following values			{			$srv_rules['gameip']      = $this->getvalue_string($def);			$srv_rules['hostname']    = $this->getvalue_string($def);			$srv_rules['mapname']     = $this->getvalue_string($def);
			$srv_rules['mapname']     = strtolower($srv_rules['mapname']);			$srv_rules['gamedir']     = $this->getvalue_string($def);			$srv_rules['gametype']    = $this->getvalue_string($def);			$srv_rules['nowplayers']  = $this->getvalue_byte($def);			$srv_rules['maxplayers']  = $this->getvalue_byte($def);			$srv_rules['netver']      = $this->getvalue_byte($def);			$srv_rules['dedicated']   = $this->getvalue_byte($def);			$srv_rules['os']          = $this->getvalue_byte($def);			$srv_rules['password']    = $this->getvalue_byte($def);			$srv_rules['is_mod']      = $this->getvalue_byte($def);			$srv_rules['url_info']    = $this->getvalue_string($def);			$srv_rules['url_down']    = $this->getvalue_string($def);			$srv_rules['unused']      = $this->getvalue_string($def);			$srv_rules['mod_version'] = $this->getvalue_lint($def);			$srv_rules['mod_size']    = $this->getvalue_lint($def);			$srv_rules['sv_only']     = $this->getvalue_byte($def);			$srv_rules['cus_cl']      = $this->getvalue_byte($def);			$srv_rules['secure']      = $this->getvalue_byte($def);			$srv_rules['bots']        = $this->getvalue_byte($def);			$srv_rules['map_path'] = 'maps/hl';										// path to map picture			}			if ($servertype == 'I')			{			$srv_rules['netver']     = $this->getvalue_byte($def);			$srv_rules['hostname']   = $this->getvalue_string($def);			$srv_rules['mapname']    = $this->getvalue_string($def);			$srv_rules['gamedir']    = $this->getvalue_string($def);			$srv_rules['gametype']   = $this->getvalue_string($def);			$srv_rules['app_id']     = $this->getvalue_sint($def);			$srv_rules['nowplayers'] = $this->getvalue_byte($def);			$srv_rules['maxplayers'] = $this->getvalue_byte($def);			$srv_rules['bots']       = $this->getvalue_byte($def);			$srv_rules['dedicated']  = $this->getvalue_byte($def);			$srv_rules['os']         = $this->getvalue_byte($def);			$srv_rules['password']   = $this->getvalue_byte($def);			$srv_rules['secure']     = $this->getvalue_byte($def);			$srv_rules['version']    = $this->getvalue_string($def);			$srv_rules['map_path'] = 'maps/hl2';									// path to map picture			}		$srv_rules['map_default'] = 'default.jpg';										// set default map picture		$srv_rules['gamename'] = $srv_rules['gametype'] . '<br>';						// set gamename with gametype value (because no gametype info in hl data		if ($srv_rules['password'] == 1)												// privileges pictures			{			$srv_rules['sets'] = $sets['pass'];			}		if ($srv_rules['sets'] === false)			{			$srv_rules['sets'] = 'No';			}        // server general info        $srv_rules['htmlinfo'] ='<tr><td align="left">Map:</td><td align="left">'								. $srv_rules['mapname']								. '</td></tr>' ."\n"								. '<tr><td align="left">Players:</td><td align="left">'								. $srv_rules['nowplayers'] . ' / ' . $srv_rules['maxplayers']								. '</td></tr>' . "\n"								. '<tr><td align="left">Response Time:</td><td align="left">'								. $srv_rules['response']								. '</td></tr>' . "\n"								. '<tr><td align="left">Privileges:</td><td align="left">'								. $srv_rules['sets']								. '</td></tr>' . "\n";        // server detail info        $srv_rules['htmldetail'] =        '<tr valign="top"><td align="left">Gamename:</td><td align="left">'        . $srv_rules['gamename']        . '</td></tr>' . "\n"        . '<tr valign="top"><td align="left">Gamedir:</td><td align="left">'        . $srv_rules['gamedir']        . '</td></tr>' . "\n"        . '<tr valign="top"><td align="left">Mapname:</td><td align="left">'        . $srv_rules['mapname']        . '</td></tr>' . "\n"        . '<tr valign="top"><td align="left">Players:</td><td align="left">'        . $srv_rules['nowplayers'] . ' / ' . $srv_rules['maxplayers']        . '</td></tr>' . "\n"        . '<tr valign="top"><td align="left">Response:</td><td align="left">'        . $srv_rules['response']        . '</td></tr>' . "\n"        . '<tr valign="top"><td align="left">Password:</td><td align="left">'        . $srv_rules['sets']        . '</td></tr>' . "\n";			// return all server rules		return $srv_rules;		}        function getplayers()		{        $players = array();		$def = 'player';											// set array key to player		$thead = "<tr><th>Rank</th><th>Name</th><th>Frags</th><th colspan=2>Time</th></tr>";	// set html thead		$this->s_info[$def] = substr($this->s_info[$def], 5);		// filter the not needed code		$nowplayers = $this->getvalue_byte($def);					// how many player must search		while ($nowplayers != 0)									// get the data of each player			{			$index = $this->getvalue_byte($def);			$nick  = $this->getvalue_string($def);			$frags = $this->getvalue_lint($def);			$time  = $this->getvalue_float($def);						$minutes = floor($time / 60);			$h       = floor($minutes / 60);			$seconds = floor($time - ($minutes * 60));			$minutes = $minutes - ($h * 60);						$time = sprintf("%02s:%02s:%02s", $h, $minutes, $seconds);			if ($time == '00:00:00')								// scan connecting players				{				$nick =  'new connection';				$frags = '-';				}						$players[$nowplayers] = $frags . " " . $time . " " . "\"$nick\"";			$nowplayers--;			}		if ($players)												// check the connected players and sort the ranking			{			sort($players, SORT_NUMERIC);			}		else			{			$thead .= "<tr align=center><td>--</td><td>--</td><td>--</td><td colspan=2>--</td></tr>\n";			}		$srv_player = $thead;										// store the html table line to the info array		$clients = count($players);									// check how many players scanned		$clients = $clients - 1;		$index = 1;													// manage the player data in the following code			while ($clients != -1)			{			list ($cache[$index], $player[$index]) = split ('\"', $players[$clients]);			list ($points[$index], $ping[$index]) =  split(' ', $cache[$index]);			$player[$index] = htmlentities($player[$index]);		// strip html code from player name			$tdata = "<tr align=center><td>$index.</td><td>$player[$index]</td><td>$points[$index]</td><td colspan=2>$ping[$index]</td></tr>\n";			$srv_player = $srv_player . $tdata;			$clients--;			$index++;			}		return $srv_player;		}			function getsettings()		{        $settings = array();		$def = 'settings';											// set array key to player		$thead = "<tr><th>Rank</th><th>Name</th><th>Frags</th><th colspan=2>Time</th></tr>";	// set html thead		$this->s_info[$def] = substr($this->s_info[$def], 5);		// filter the not needed code		echo $this->s_info['settings'];		}	}
